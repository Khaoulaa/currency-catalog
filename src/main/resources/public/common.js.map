{"version":3,"sources":["webpack:///./src/app/services/currency.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAA2C;AACuC;AAChD;AAC2B;AAM7D;IAKE,yBAAoB,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;QAJ1C,WAAM,GAAG,qEAAW,CAAC,GAAG,CAAC;QACzB,gBAAW,GAAG;YACb,OAAO,EAAE,IAAI,gEAAW,CAAC,EAAC,cAAc,EAAE,iCAAiC,EAAC,CAAC;SAC9E,CAAC;IAC6C,CAAC;IAEhD,0CAAgB,GAAhB,UAAiB,OAAe,EAAE,KAAa,EAAG,IAAY;QAC5D,IAAI,QAAQ,GAAG;YACb,KAAK,EAAG,KAAK;YACb,IAAI,EAAG,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;SACvC,CAAC;QACF,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAM,IAAI,CAAC,MAAM,GAAG,cAAc,GAAG,OAAO,EAAG,QAAQ,EAAG,IAAI,CAAC,WAAW,CAAC,CAAC;IAC1G,CAAC;IACD,yCAAe,GAAf,UAAgB,EAAU;QACxB,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,YAAY,GAAG,EAAE,EAAE,IAAI,CAAC,WAAW,CAAE,CAAC;IAClF,CAAC;IACO,qCAAW,GAAnB,UAAoB,aAAgC;QAClD,IAAI,aAAa,CAAC,KAAK,YAAY,UAAU,EAAE;YAC7C,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SACjE;aAAM;YACL,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,aAAa,CAAC,CAAC;SACnD;QAED,OAAO,+CAAU,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,IAAI,cAAc,CAAC,CAAC;IACnE,CAAC;IAzBU,eAAe;QAJ3B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAOiC,+DAAU;OALhC,eAAe,CA0B3B;IAAD,sBAAC;CAAA;AA1B2B","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient , HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CurrencyService {\n   apiUrl = environment.api;\n   httpOptions = {\n    headers: new HttpHeaders({'Content-Type': 'application/json; charset=utf-8'})\n  };\n  constructor(private _httpClient: HttpClient) { }\n\n  getAllCurrencies(maxSize: number, field: string , text: string) : Observable<any> {\n    let criteria = {\n      field : field,\n      text : text.length === 0 ? null : text\n    };\n    return this._httpClient.post<any>(this.apiUrl + '/currencies/' + maxSize , criteria , this.httpOptions);\n  }\n  getCurrencyById(id: String): Observable<any>{\n    return this._httpClient.get(this.apiUrl + '/currency/' + id, this.httpOptions );\n  }\n  private handleError(errorResponse: HttpErrorResponse) {\n    if (errorResponse.error instanceof ErrorEvent) {\n      console.log('Client Side Error: ', errorResponse.error.message);\n    } else {\n      console.log('Server Side Error: ', errorResponse);\n    }\n\n    return Observable.throw(errorResponse.message || 'Server Error');\n  }\n}\n"],"sourceRoot":""}